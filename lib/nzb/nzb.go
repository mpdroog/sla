package nzb

import (
	"fmt"
	"time"
	"encoding/xml"
	"os"
)

type Segment struct {
	Bytes string `xml:"bytes,attr"`
	Number string `xml:"number,attr"`
	Msgid string `xml:",innerxml"`
}
type Nzb struct {
	File struct {
		Segments struct {
			Segment []Segment `xml:"segment"`
		} `xml:"segments"`
	} `xml:"file"`
}

func segments(msgids map[string]int64) string {
	// <segment bytes="394827" number="1">Part1of87.CC19C709AFA241E5A8820BA44725CCE0@1444933554.local</segment>
	segments := ""
	id := 0
	for msgid, size := range msgids {
		id++
		segments += fmt.Sprintf(`<segment bytes="%d" number="%d">%s</segment>`, size, id, msgid)
	}
	return segments
}

func Build(subject string, msgids map[string]int64) string {
	segments := segments(msgids)

	return fmt.Sprintf(`<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE nzb PUBLIC "-//newzBin//DTD NZB 1.0//EN" "http://www.nzbindex.com/nzb-1.0.dtd">
<!-- NZB Generated by UF Upload -->
<nzb xmlns="http://www.newzbin.com/DTD/2003/nzb">
<file poster="support@usenet.farm" date="%s" subject="%s">
<groups>
<group>alt.binaries.test</group>
</groups>
<segments>%s</segments>
</file>
</nzb>`, time.Now().String(), subject, segments)
}

func Open(path string) (Nzb, error) {
	n := Nzb{}
	f, e := os.Open(path)
	if e != nil {
		return n, e
	}
	dec := xml.NewDecoder(f)
	if e := dec.Decode(&n); e != nil {
		return n, e
	}
	return n, nil
}
