package nzb

import (
	"fmt"
	"strings"
	"testing"
	"time"
)

func TestCount(t *testing.T) {
	now := time.Now().String()
	// Build(subject string, msgids map[string]int64) string
	a := Build("test", []Msg{
		Msg{"a@test", 10},
		Msg{"b@test", 200},
		Msg{"c@test", 3000},
	}, now)
	example := `<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE nzb PUBLIC "-//newzBin//DTD NZB 1.0//EN" "http://www.nzbindex.com/nzb-1.0.dtd">
<!-- NZB Generated by UF Upload -->
<nzb xmlns="http://www.newzbin.com/DTD/2003/nzb">
<file poster="support@usenet.farm" date="::date::" subject="test">
<groups>
<group>alt.binaries.test</group>
</groups>
<segments><segment bytes="10" number="1">a@test</segment><segment bytes="200" number="2">b@test</segment><segment bytes="3000" number="3">c@test</segment></segments>
</file>
</nzb>`
	example = strings.Replace(example, "::date::", now, 1)

	if a != example {
		fmt.Printf("GEN=\n%s\n\nHARDCODED=\n%s\n", a, example)
		t.Errorf("NZB body does not match (%d/%d)", len(a), len(example))
	}
}

func TestSorting(t *testing.T) {
	now := time.Now().String()
	// Build(subject string, msgids map[string]int64) string
	a := Build("test", []Msg{
		Msg{"c@test", 3000},
		Msg{"a@test", 10},
		Msg{"b@test", 200},
	}, now)
	example := `<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE nzb PUBLIC "-//newzBin//DTD NZB 1.0//EN" "http://www.nzbindex.com/nzb-1.0.dtd">
<!-- NZB Generated by UF Upload -->
<nzb xmlns="http://www.newzbin.com/DTD/2003/nzb">
<file poster="support@usenet.farm" date="::date::" subject="test">
<groups>
<group>alt.binaries.test</group>
</groups>
<segments><segment bytes="3000" number="1">c@test</segment><segment bytes="10" number="2">a@test</segment><segment bytes="200" number="3">b@test</segment></segments>
</file>
</nzb>`
	example = strings.Replace(example, "::date::", now, 1)

	if a != example {
		fmt.Printf("GEN=\n%s\n\nHARDCODED=\n%s\n", a, example)
		t.Errorf("NZB body does not match (%d/%d)", len(a), len(example))
	}
}

func TestRead(t *testing.T) {
	in := `<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE nzb PUBLIC "-//newzBin//DTD NZB 1.0//EN" "http://www.nzbindex.com/nzb-1.0.dtd">
<!-- NZB Generated by UF Upload -->
<nzb xmlns="http://www.newzbin.com/DTD/2003/nzb">
<file poster="support@usenet.farm" date="::date::" subject="test">
<groups>
<group>alt.binaries.test</group>
</groups>
<segments><segment bytes="3000" number="1">c@test</segment><segment bytes="10" number="2">a@test</segment><segment bytes="200" number="3">b@test</segment></segments>
</file>
</nzb>`
	nzb, e := Read(strings.NewReader(in))
	if e != nil {
		panic(e)
	}
	if len(nzb.File.Segments.Segment) != 3 {
		t.Errorf("NZB contains 3 segment but found=%d", len(nzb.File.Segments.Segment))
	}

	expect := []Segment{
		Segment{Bytes: 3000, Number: 1, Msgid: "c@test"},
		Segment{Bytes: 10, Number: 2, Msgid: "a@test"},
		Segment{Bytes: 200, Number: 3, Msgid: "b@test"},
	}
	for idx, segment := range nzb.File.Segments.Segment {
		if segment.Bytes != expect[idx].Bytes {
			t.Errorf("Bytes mismatch. expect=%d, found=%d", segment.Bytes, expect[idx].Bytes)
		}
		if segment.Number != expect[idx].Number {
			t.Errorf("Number mismatch. expect=%d, found=%d", segment.Number, expect[idx].Number)
		}
		if segment.Msgid != expect[idx].Msgid {
			t.Errorf("Msgid mismatch. expect=%d, found=%d", segment.Msgid, expect[idx].Msgid)
		}
	}
}